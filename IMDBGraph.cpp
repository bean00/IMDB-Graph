// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!! DO NOT EDIT THIS FILE !!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include "IMDBGraph.h"

// Function: containsActor
// Purpose: Checks whether the requested actor is in the graph
// Input: Name of actor (by const reference)
// Returns: True if the actor is in the graph
bool IMDBGraph::containsActor(const std::string& actorName)
{
	return mActorNodeMap.containsKey(actorName);
}

// Function: getActorNode
// Purpose: If the actor doesn't exist, creates a node for the actor.
// Otherwise, returns the ActorNode associated w/ the specified actor.
// Input: Name of actor (by const reference)
// Returns: Pointer to ActorNode associated with the actor
ActorNode* IMDBGraph::getActorNode(const std::string& actorName)
{
	// If the actor already exists, return the pointer
	// to its ActorNode
	if (mActorNodeMap.containsKey(actorName))
	{
		return mActorNodeMap[actorName];
	}
	else
	{
		// Otherwise, make a new ActorNode for this actor
		ActorNode* newNode = new ActorNode(actorName);
		mActorNodeMap.put(actorName, newNode);
		return newNode;
	}
}

// Function: createActorEdge
// Purpose: Creates a directed edge from firstActor to secondActor, and
// from secondActor to firstActor. Both edges have the specified movie name as
// their label.
// Input: Pointer to the first ActorNode, pointer to the second ActorNode,
// and the movie name (by reference)
// Returns: Nothing
void IMDBGraph::createActorEdge(ActorNode* firstActor, ActorNode* secondActor, const std::string& movieName)
{
	if (firstActor == nullptr)
	{
		error("createActorEdge: first actor is null!");
	}

	if (secondActor == nullptr)
	{
		error("createActorEdge: second actor is null!");
	}

	// Make an edge from the first actor to the second actor
	Edge* firstToSecond = new Edge(movieName, secondActor);
	firstActor->mEdges.push_back(firstToSecond);
	
	// Make an edge from the second actor to the first actor
	Edge* secondToFirst = new Edge(movieName, firstActor);
	secondActor->mEdges.push_back(secondToFirst);
}

// Helper function used by "clearVisited"
void clearVisitedHelper(const std::string& key, ActorNode* value)
{
	value->mIsVisited = false;
	value->mPath.clear();
}

// Function: clearVisited
// Purpose: Clears the mIsVisited flag on every ActorNode in the graph,
// and also clears out the PathPair lists.
// Input: None
// Returns: Nothing
void IMDBGraph::clearVisited()
{
	mActorNodeMap.mapAll(&clearVisitedHelper);
}

// Helper function used by destructor
void deleteHelper(const std::string& key, ActorNode* value)
{
	delete value;
}

// Function: Destructor
// Purpose: Deletes all of the actor nodes in the graph
// Input: None
// Returns: Nothing
IMDBGraph::~IMDBGraph()
{
	mActorNodeMap.mapAll(&deleteHelper);
}

// ActorNode destructor
ActorNode::~ActorNode()
{
	for (Edge* e : mEdges)
	{
		delete e;
	}
}
